@using BusinessLogicLayer.DTOs

@model List<CartDetailsDto>

<div class="container mt-4">
    <h2 class="text-light text-center mb-4">Shopping Cart</h2>

    <!-- Cart Items -->
    <div class="row">
        <div class="col-lg-8">
            <div class="card bg-dark text-light p-3 border border-secondary">
                <a asp-action="ClearCart" asp-controller="Cart"
                   class="btn btn-danger w-100 py-2 fw-bold clear-cart">
                    Clear Cart
                </a>
                <div class="card-body">
                    @if (Model.Any())
                    {
                        @foreach (var item in Model)
                        {
                            <div class="row mb-4 pb-3 border-bottom border-secondary cart-item" data-product-id="@item.ProductId">
                                <div class="col-md-3 text-center">
                                    <img src="~/Images/@item.ImageUrl" class="img-fluid rounded" alt="@item.Name" style="max-height: 120px;">
                                </div>
                                <div class="col-md-6">
                                    <h5 class="fw-bold text-light">@item.Name</h5>
                                    <p class="text-light-50">@item.Description</p>
                                    <p class="fw-bold text-success item-price" data-price="@item.Price">$@item.Price</p>
                                    <p class="text-light-50">Stock: @item.Stock</p>
                                    <a asp-controller="Cart" asp-action="RemoveCartItem"
                                       asp-route-productId="@item.ProductId"
                                       class="text-danger remove-item"
                                       data-product-id="@item.ProductId">
                                        Remove
                                    </a>
                                </div>
                                <div class="col-md-3 text-center">
                                    <input type="number" class="form-control text-center bg-dark text-light border border-secondary quantity-input"
                                           value="@item.Quantity" min="1" max="@item.Stock" style="width: 60px; display: inline;">
                                    <p class="fw-bold mt-2 item-total">$@(item.Price * item.Quantity)</p>
                                </div>
                            </div>
                        }
                    }
                    else
                    {
                        <div class="alert alert-warning" role="alert">
                            Your cart is empty.
                        </div>
                    }
                </div>
            </div>
        </div>

        <!-- Cart Summary -->
        <div class="col-lg-4">
            <div class="card bg-dark text-light p-3 border border-secondary">
                <div class="card-body">
                    <h4 class="fw-bold text-light">Cart Summary</h4>
                    <p class="text-light-50">Total Items: <span class="fw-bold" id="total-items">@Model.Sum(i => i.Quantity)</span></p>
                    <p class="text-light-50">Total Price: <span class="fw-bold text-success" id="total-price">$@Model.Sum(i => i.Price * i.Quantity)</span></p>

                    <form asp-controller="Order" asp-action="Checkout" method="post" id="checkout-form">
                        <button type="submit" class="btn btn-primary w-100 py-2 fw-bold mt-3">
                            Proceed to Checkout
                        </button>
                    </form>
                </div>
            </div>
        </div>
    </div>
</div>

<!-- jQuery (Required for LocalStorage Operations) -->
<script src="https://code.jquery.com/jquery-3.6.0.min.js"></script>
<script>
    $(document).ready(function () {
        loadCartQuantities(); // Load saved quantities from localStorage

        // Update localStorage when quantity changes
        $(".quantity-input").on("change", function () {
            let quantity = parseInt($(this).val());
            let productId = $(this).closest(".cart-item").data("product-id");

            saveCartQuantity(productId, quantity);
            updateCartSummary();
        });

        // Remove item and update localStorage before navigating
        $(".remove-item").on("click", function (e) {
            e.preventDefault();
            let productId = $(this).data("product-id");

            removeCartQuantity(productId); // Remove from localStorage

            // Redirect to the controller action to remove from backend
            window.location.href = $(this).attr("href");
        });

        // Clear cart completely
        $(".clear-cart").on("click", function () {
            localStorage.clear();  // Clears all cart-related items from localStorage
        });

        // Update Cart Summary
        function updateCartSummary() {
            let totalItems = 0;
            let totalPrice = 0;

            $(".cart-item").each(function () {
                let quantity = parseInt($(this).find(".quantity-input").val());
                let price = parseFloat($(this).find(".item-price").data("price"));

                totalItems += quantity;
                totalPrice += price * quantity;

                $(this).find(".item-total").text("$" + (price * quantity).toFixed(2));
            });

            $("#total-items").text(totalItems);
            $("#total-price").text("$" + totalPrice.toFixed(2));

            // Show empty cart message if needed
            if ($(".cart-item").length === 0) {
                $(".card-body").html('<div class="alert alert-warning">Your cart is empty.</div>');
            }
        }

        // Save Quantity in LocalStorage
        function saveCartQuantity(productId, quantity) {
            localStorage.setItem("cart_quantity_" + productId, quantity);
        }

        // Remove from LocalStorage
        function removeCartQuantity(productId) {
            localStorage.removeItem("cart_quantity_" + productId);
        }

        // Load Saved Quantities from LocalStorage
        function loadCartQuantities() {
            $(".quantity-input").each(function () {
                let productId = $(this).closest(".cart-item").data("product-id");
                let savedQuantity = localStorage.getItem("cart_quantity_" + productId);
                if (savedQuantity) {
                    $(this).val(savedQuantity);
                }
            });
            updateCartSummary();
        }
        // Handle Checkout Form Submission
        $("#checkout-form").on("submit", function (e) {
            e.preventDefault();

            let cartItems = [];

            $(".cart-item").each(function () {
                let productId = $(this).data("product-id");
                let quantity = parseInt($(this).find(".quantity-input").val());

                cartItems.push({ productId: productId, quantity: quantity });
            });

            $.ajax({
                url: '/Order/Checkout',
                method: 'POST',
                contentType: 'application/json',
                data: JSON.stringify(cartItems),
                success: function (response) {
                    window.location.href = response.redirectUrl;
                },
                error: function (error) {
                    alert('An error occurred during checkout.');
                }
            });
        });
    });
</script>